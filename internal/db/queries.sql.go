// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (name, path)
VALUES (?, ?)
RETURNING id, name, path, last_opened, created_at, updated_at
`

type CreateProjectParams struct {
	Name string
	Path string
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, arg.Name, arg.Path)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.LastOpened,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProject = `-- name: GetProject :one
SELECT id, name, path, last_opened, created_at, updated_at FROM projects
WHERE path = ? LIMIT 1
`

func (q *Queries) GetProject(ctx context.Context, path string) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProject, path)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.LastOpened,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRecentProjects = `-- name: ListRecentProjects :many
SELECT id, name, path, last_opened, created_at, updated_at FROM projects
ORDER BY last_opened DESC
LIMIT ?
`

func (q *Queries) ListRecentProjects(ctx context.Context, limit int64) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listRecentProjects, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Path,
			&i.LastOpened,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProjectLastOpened = `-- name: UpdateProjectLastOpened :exec
UPDATE projects
SET last_opened = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) UpdateProjectLastOpened(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateProjectLastOpened, id)
	return err
}
